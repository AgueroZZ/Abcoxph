model_data
}
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
library(reshape2)
model_setup <- function(formula,data,control = abcox_control(),verbose = FALSE) {
model_data <- structure(list(), class = "abcox_modeldata")
# Parse the formula
model_elements <- parse_formula(formula)
# Check that the smooth and strata terms exist in the data
# The linear terms will be passed to model.matrix, which has its own
# error checking.
extra_model_vars <- model_elements[c("smooth","strata")] %>% purrr::reduce(c)
if (!all(extra_model_vars %in% colnames(data))) {
missing_vars <- extra_model_vars[!(extra_model_vars %in% colnames(data))]
stop(paste0("The following variables were provided in the model formula but not in the data: ",
stringr::str_c(missing_vars,collapse = ", ")))
}
# Create the smooth terms- design matrix
Alist <- list()
if (length(model_elements$smooth) > 0) {
for (nm in model_elements$smooth) {
Alist[[nm]] <- create_alist_element(data[[nm]])
}
}
model_data$A <- Alist
if (length(Alist) == 0) {
model_data$A <- NULL
model_data$M <- 0 # No smooth terms
} else {
model_data$M <- Alist %>% purrr::map("A") %>% purrr::map(ncol) %>% purrr::reduce(sum)
}
# Number of subjects
n <- length(unique(data[model_elements$strata]))
# Linear terms
if (length(model_elements$linear) == 0) {
model_data$X <- NULL
model_data$p <- 0 # No linear terms
} else {
model_data$X <- Matrix::sparse.model.matrix(model_elements$linear_formula,data = data)
model_data$p <- ncol(model_data$X)
# Safety check: ncol(X) > 0.
if (ncol(model_data$X) == 0) {
model_data$X <- NULL
model_data$p <- 0 # No linear terms
}
}
# Create the vector of control days
# A named vector where the names are the subject ids and the values are the number
# of control days that each has in the data
control_days <- data %>%
dplyr::arrange(.data[[model_elements$strata]],.data[[model_elements$response]]) %>%
dplyr::filter(.data[[model_elements$response]] == 0) %>%
dplyr::group_by(.data[[model_elements$strata]]) %>%
dplyr::summarize(control_days = n())
# Create the vector of case days
# A named vector where the names are the subject ids and the values are the number
# of control days that each has in the data
case_days <- data %>%
dplyr::arrange(.data[[model_elements$strata]],.data[[model_elements$response]]) %>%
dplyr::filter(.data[[model_elements$response]] != 0) %>%
dplyr::rename(case_days = .data[[model_elements$response]])
model_data$control_days <- control_days$control_days
model_data$case_days <- case_days$case_days
names(model_data$control_days) <- data[[model_elements$strata]] %>% unique() %>% sort()
names(model_data$case_days) <- data[[model_elements$strata]] %>% unique() %>% sort()
model_data$n <- length(model_data$case_days)
model_data$Nd <- sum(model_data$control_days)
model_data$Ne <- model_data$Nd + model_data$n
# Priors.
# Currently only pc.prec prior is implemented.
# Prior u is P(sigma > u) = alpha.
if (length(control$smooth_prior) != length(model_elements$smooth)) stop(stringr::str_c(length(control$smooth_prior)," priors provided for ",length(model_elements$smooth)," hyperparameters."))
if (model_data$M > 0) {
model_data$theta_logprior <- fortify_priors(control$smooth_prior)
} else {
model_data$theta_logprior <- function(theta) {force(theta); return(0)} # Placeholder
}
# log(precision) for prior on beta. Specified in control
model_data$beta_logprec <- control$beta_prior_logprec
# Differenced matrices:
model_data$diffmat <- create_diff_matrix(model_data$control_days)
model_data$lambdainv <- create_full_dtcp_matrix(model_data$control_days)
if (model_data$M > 0) {
for (nm in names(model_data$A)) {
model_data$A[[nm]]$Ad <- model_data$diffmat %*% model_data$A[[nm]]$A
}
}
if (model_data$p > 0) {
model_data$Xd <- model_data$diffmat %*% model_data$X
}
# Check for linear constraints. Validate and then add them to the model data.
# If there are linear constraints, take the first one for each variable and create the
# model_data$vectorofcolumnstoremove element.
if (length(model_elements$smooth) > 0) {
if (length(control$linear_constraints) != length(model_elements$smooth)) {
warning("Smooth terms, but no linear constraints, specified. You should add one or more constraints. See create_linear_constraints().")
} else {
# For each smooth term with a constraint, Take the first one and use it to set one to zero
k <- 0
s <- 1
model_data$vectorofcolumnstoremove <- numeric()
names(model_data$vectorofcolumnstoremove) <- character()
for (nm in model_elements$smooth) {
whichzero <- which(control$linear_constraints[[nm]]$whichzero[1] == control$linear_constraints[[nm]]$u)
model_data$vectorofcolumnstoremove <- c(model_data$vectorofcolumnstoremove,whichzero + k)
k <- k + length(control$linear_constraints[[nm]]$u)
model_data$M <- model_data$M - 1
names(model_data$vectorofcolumnstoremove)[s] <- nm
s <- s + 1
}
# nm <- model_elements$smooth[1]
# model_data$vectorofcolumnstoremove <- control$linear_constraints[[nm]]$whichzero[1]
# Adjust M
# model_data$M <- model_data$M - 1
# Remove this constraint from the list of constraints
# ACTUALLY: do I have to...? If I add it back in later I don't think it matters. We'll see.
}
}
# Set final dimensions
model_data$Wd <- model_data$M + model_data$p + model_data$Nd
model_data$Wdf <- model_data$M + model_data$p + model_data$Ne
# Add back the control list and model elements
model_data$control <- control
model_data$model_elements <- model_elements
model_data
}
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
library(reshape2)
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
model_setup <- function(formula,data,control = abcox_control(),verbose = FALSE) {
model_data <- structure(list(), class = "abcox_modeldata")
# Parse the formula
model_elements <- reshape2:::parse_formula(formula)
# Check that the smooth and strata terms exist in the data
# The linear terms will be passed to model.matrix, which has its own
# error checking.
extra_model_vars <- model_elements[c("smooth","strata")] %>% purrr::reduce(c)
if (!all(extra_model_vars %in% colnames(data))) {
missing_vars <- extra_model_vars[!(extra_model_vars %in% colnames(data))]
stop(paste0("The following variables were provided in the model formula but not in the data: ",
stringr::str_c(missing_vars,collapse = ", ")))
}
# Create the smooth terms- design matrix
Alist <- list()
if (length(model_elements$smooth) > 0) {
for (nm in model_elements$smooth) {
Alist[[nm]] <- create_alist_element(data[[nm]])
}
}
model_data$A <- Alist
if (length(Alist) == 0) {
model_data$A <- NULL
model_data$M <- 0 # No smooth terms
} else {
model_data$M <- Alist %>% purrr::map("A") %>% purrr::map(ncol) %>% purrr::reduce(sum)
}
# Number of subjects
n <- length(unique(data[model_elements$strata]))
# Linear terms
if (length(model_elements$linear) == 0) {
model_data$X <- NULL
model_data$p <- 0 # No linear terms
} else {
model_data$X <- Matrix::sparse.model.matrix(model_elements$linear_formula,data = data)
model_data$p <- ncol(model_data$X)
# Safety check: ncol(X) > 0.
if (ncol(model_data$X) == 0) {
model_data$X <- NULL
model_data$p <- 0 # No linear terms
}
}
# Create the vector of control days
# A named vector where the names are the subject ids and the values are the number
# of control days that each has in the data
control_days <- data %>%
dplyr::arrange(.data[[model_elements$strata]],.data[[model_elements$response]]) %>%
dplyr::filter(.data[[model_elements$response]] == 0) %>%
dplyr::group_by(.data[[model_elements$strata]]) %>%
dplyr::summarize(control_days = n())
# Create the vector of case days
# A named vector where the names are the subject ids and the values are the number
# of control days that each has in the data
case_days <- data %>%
dplyr::arrange(.data[[model_elements$strata]],.data[[model_elements$response]]) %>%
dplyr::filter(.data[[model_elements$response]] != 0) %>%
dplyr::rename(case_days = .data[[model_elements$response]])
model_data$control_days <- control_days$control_days
model_data$case_days <- case_days$case_days
names(model_data$control_days) <- data[[model_elements$strata]] %>% unique() %>% sort()
names(model_data$case_days) <- data[[model_elements$strata]] %>% unique() %>% sort()
model_data$n <- length(model_data$case_days)
model_data$Nd <- sum(model_data$control_days)
model_data$Ne <- model_data$Nd + model_data$n
# Priors.
# Currently only pc.prec prior is implemented.
# Prior u is P(sigma > u) = alpha.
if (length(control$smooth_prior) != length(model_elements$smooth)) stop(stringr::str_c(length(control$smooth_prior)," priors provided for ",length(model_elements$smooth)," hyperparameters."))
if (model_data$M > 0) {
model_data$theta_logprior <- fortify_priors(control$smooth_prior)
} else {
model_data$theta_logprior <- function(theta) {force(theta); return(0)} # Placeholder
}
# log(precision) for prior on beta. Specified in control
model_data$beta_logprec <- control$beta_prior_logprec
# Differenced matrices:
model_data$diffmat <- create_diff_matrix(model_data$control_days)
model_data$lambdainv <- create_full_dtcp_matrix(model_data$control_days)
if (model_data$M > 0) {
for (nm in names(model_data$A)) {
model_data$A[[nm]]$Ad <- model_data$diffmat %*% model_data$A[[nm]]$A
}
}
if (model_data$p > 0) {
model_data$Xd <- model_data$diffmat %*% model_data$X
}
# Check for linear constraints. Validate and then add them to the model data.
# If there are linear constraints, take the first one for each variable and create the
# model_data$vectorofcolumnstoremove element.
if (length(model_elements$smooth) > 0) {
if (length(control$linear_constraints) != length(model_elements$smooth)) {
warning("Smooth terms, but no linear constraints, specified. You should add one or more constraints. See create_linear_constraints().")
} else {
# For each smooth term with a constraint, Take the first one and use it to set one to zero
k <- 0
s <- 1
model_data$vectorofcolumnstoremove <- numeric()
names(model_data$vectorofcolumnstoremove) <- character()
for (nm in model_elements$smooth) {
whichzero <- which(control$linear_constraints[[nm]]$whichzero[1] == control$linear_constraints[[nm]]$u)
model_data$vectorofcolumnstoremove <- c(model_data$vectorofcolumnstoremove,whichzero + k)
k <- k + length(control$linear_constraints[[nm]]$u)
model_data$M <- model_data$M - 1
names(model_data$vectorofcolumnstoremove)[s] <- nm
s <- s + 1
}
# nm <- model_elements$smooth[1]
# model_data$vectorofcolumnstoremove <- control$linear_constraints[[nm]]$whichzero[1]
# Adjust M
# model_data$M <- model_data$M - 1
# Remove this constraint from the list of constraints
# ACTUALLY: do I have to...? If I add it back in later I don't think it matters. We'll see.
}
}
# Set final dimensions
model_data$Wd <- model_data$M + model_data$p + model_data$Nd
model_data$Wdf <- model_data$M + model_data$p + model_data$Ne
# Add back the control list and model elements
model_data$control <- control
model_data$model_elements <- model_elements
model_data
}
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
library(tidyverse)
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
# INTERNAL: parse formula
parse_formula <- function(ff) {
# Parse the formula ff into linear and smooth terms and a strata
# Linear terms will be passed to model.matrix()
# Smooth terms will be handled in a proprietary manner
# The strata argument must be provided.
fullff <- ff # Save the input formula for later printing.
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Remove it from ff
if (length(smooth) > 0) {
for (tm in smooth) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match strata terms in same way as smooth
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Remove it from ff
if (length(strata) > 0) {
for (tm in strata) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
# All the terms that are left are treated as linear and passed to model.matrix
# within the model_setup function. Any errors will come from that call.
# If there is not exactly one strata term, throw an error
if (length(strata) == 0) stop("No strata variable provided.")
if (length(strata) > 1) {
stop(paste0("You must provide exactly one strata variable. The following strata variables were parsed: ",
stringr::str_c(strata,collapse=", ")))
}
# Finally, remove the intercept. If a -1 was already in the formula, this operation does nothing,
# so it's safe.
ff <- update(ff,.~.-1)
# Return a named list of vectors with the names of each type of term
list(
# linear = attributes(terms(ff))$term.labels,
linear = setdiff(all.vars(ff),response),
linear_formula = ff,
smooth = smooth,
strata = strata,
response = response,
call = fullff
)
}
model_setup <- function(formula,data,control = abcox_control(),verbose = FALSE) {
model_data <- structure(list(), class = "abcox_modeldata")
# Parse the formula
model_elements <- parse_formula(formula)
# Check that the smooth and strata terms exist in the data
# The linear terms will be passed to model.matrix, which has its own
# error checking.
extra_model_vars <- model_elements[c("smooth","strata")] %>% purrr::reduce(c)
if (!all(extra_model_vars %in% colnames(data))) {
missing_vars <- extra_model_vars[!(extra_model_vars %in% colnames(data))]
stop(paste0("The following variables were provided in the model formula but not in the data: ",
stringr::str_c(missing_vars,collapse = ", ")))
}
# Create the smooth terms- design matrix
Alist <- list()
if (length(model_elements$smooth) > 0) {
for (nm in model_elements$smooth) {
Alist[[nm]] <- create_alist_element(data[[nm]])
}
}
model_data$A <- Alist
if (length(Alist) == 0) {
model_data$A <- NULL
model_data$M <- 0 # No smooth terms
} else {
model_data$M <- Alist %>% purrr::map("A") %>% purrr::map(ncol) %>% purrr::reduce(sum)
}
# Number of subjects
n <- length(unique(data[model_elements$strata]))
# Linear terms
if (length(model_elements$linear) == 0) {
model_data$X <- NULL
model_data$p <- 0 # No linear terms
} else {
model_data$X <- Matrix::sparse.model.matrix(model_elements$linear_formula,data = data)
model_data$p <- ncol(model_data$X)
# Safety check: ncol(X) > 0.
if (ncol(model_data$X) == 0) {
model_data$X <- NULL
model_data$p <- 0 # No linear terms
}
}
# Create the vector of control days
# A named vector where the names are the subject ids and the values are the number
# of control days that each has in the data
control_days <- data %>%
dplyr::arrange(.data[[model_elements$strata]],.data[[model_elements$response]]) %>%
dplyr::filter(.data[[model_elements$response]] == 0) %>%
dplyr::group_by(.data[[model_elements$strata]]) %>%
dplyr::summarize(control_days = n())
# Create the vector of case days
# A named vector where the names are the subject ids and the values are the number
# of control days that each has in the data
case_days <- data %>%
dplyr::arrange(.data[[model_elements$strata]],.data[[model_elements$response]]) %>%
dplyr::filter(.data[[model_elements$response]] != 0) %>%
dplyr::rename(case_days = .data[[model_elements$response]])
model_data$control_days <- control_days$control_days
model_data$case_days <- case_days$case_days
names(model_data$control_days) <- data[[model_elements$strata]] %>% unique() %>% sort()
names(model_data$case_days) <- data[[model_elements$strata]] %>% unique() %>% sort()
model_data$n <- length(model_data$case_days)
model_data$Nd <- sum(model_data$control_days)
model_data$Ne <- model_data$Nd + model_data$n
# Priors.
# Currently only pc.prec prior is implemented.
# Prior u is P(sigma > u) = alpha.
if (length(control$smooth_prior) != length(model_elements$smooth)) stop(stringr::str_c(length(control$smooth_prior)," priors provided for ",length(model_elements$smooth)," hyperparameters."))
if (model_data$M > 0) {
model_data$theta_logprior <- fortify_priors(control$smooth_prior)
} else {
model_data$theta_logprior <- function(theta) {force(theta); return(0)} # Placeholder
}
# log(precision) for prior on beta. Specified in control
model_data$beta_logprec <- control$beta_prior_logprec
# Differenced matrices:
model_data$diffmat <- create_diff_matrix(model_data$control_days)
model_data$lambdainv <- create_full_dtcp_matrix(model_data$control_days)
if (model_data$M > 0) {
for (nm in names(model_data$A)) {
model_data$A[[nm]]$Ad <- model_data$diffmat %*% model_data$A[[nm]]$A
}
}
if (model_data$p > 0) {
model_data$Xd <- model_data$diffmat %*% model_data$X
}
# Check for linear constraints. Validate and then add them to the model data.
# If there are linear constraints, take the first one for each variable and create the
# model_data$vectorofcolumnstoremove element.
if (length(model_elements$smooth) > 0) {
if (length(control$linear_constraints) != length(model_elements$smooth)) {
warning("Smooth terms, but no linear constraints, specified. You should add one or more constraints. See create_linear_constraints().")
} else {
# For each smooth term with a constraint, Take the first one and use it to set one to zero
k <- 0
s <- 1
model_data$vectorofcolumnstoremove <- numeric()
names(model_data$vectorofcolumnstoremove) <- character()
for (nm in model_elements$smooth) {
whichzero <- which(control$linear_constraints[[nm]]$whichzero[1] == control$linear_constraints[[nm]]$u)
model_data$vectorofcolumnstoremove <- c(model_data$vectorofcolumnstoremove,whichzero + k)
k <- k + length(control$linear_constraints[[nm]]$u)
model_data$M <- model_data$M - 1
names(model_data$vectorofcolumnstoremove)[s] <- nm
s <- s + 1
}
# nm <- model_elements$smooth[1]
# model_data$vectorofcolumnstoremove <- control$linear_constraints[[nm]]$whichzero[1]
# Adjust M
# model_data$M <- model_data$M - 1
# Remove this constraint from the list of constraints
# ACTUALLY: do I have to...? If I add it back in later I don't think it matters. We'll see.
}
}
# Set final dimensions
model_data$Wd <- model_data$M + model_data$p + model_data$Nd
model_data$Wdf <- model_data$M + model_data$p + model_data$Ne
# Add back the control list and model elements
model_data$control <- control
model_data$model_elements <- model_elements
model_data
}
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
control_days <- data %>%
dplyr::arrange(.data[[model_elements$strata]],.data[[model_elements$response]]) %>%
dplyr::filter(.data[[model_elements$response]] == 0) %>%
dplyr::group_by(.data[[model_elements$strata]]) %>%
dplyr::summarize(control_days = n())
source('~/Desktop/abcoxph/R/01-model-setup.R')
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
source('~/Desktop/abcoxph/R/00-utils.R')
source('~/Desktop/abcoxph/R/00-utils.R')
pcprec <- function(theta,u,alpha) {
lambda <- -log(alpha)/u
sum(log(lambda/2) - lambda * exp(-theta/2) - theta/2)
}
source('~/Desktop/abcoxph/R/00-utils.R')
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
library(Matrix)
source('~/Desktop/abcoxph/R/00-utils.R')
model_setup(y~x + strata(id),data.frame(y = c(0,1),x = c(1,2),id = c(1,1)))
parse_formula(y~x + strata(id))
parse_formula(y~x + smooth(z) + strata(id))
parse_formula(y~x + s(z) + strata(id))
debugSource('~/Desktop/abcoxph package (use this one)/R/03-latent-variables.R')
source('~/Desktop/abcoxph package (use this one)/R/03-latent-variables.R')
parse_formula <- function(ff) {
# Parse the formula ff into linear and smooth terms and a id
# Linear terms will be passed to model.matrix()
# Smooth terms will be handled in a proprietary manner
fullff <- ff # Save the input formula for later printing.
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Remove it from ff
if (length(smooth) > 0) {
for (tm in smooth) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match id terms in same way as smooth
id <- stringr::str_extract(ff_elements,"^id\\(\\w+\\)$")
id <- id[!is.na(id)]
# Remove it from ff
if (length(id) > 0) {
for (tm in id) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
id <- stringr::str_remove(id,"^id\\(") %>% stringr::str_remove("\\)$")
# All the terms that are left are treated as linear and passed to model.matrix
# within the model_setup function. Any errors will come from that call.
# Finally, remove the intercept. If a -1 was already in the formula, this operation does nothing,
# so it's safe.
ff <- update(ff,.~.-1)
# Return a named list of vectors with the names of each type of term
list(
# linear = attributes(terms(ff))$term.labels,
linear = setdiff(all.vars(ff),response),
linear_formula = ff,
smooth = smooth,
id = id,
response = response,
call = fullff
)
}
parse_formula(times~age + sex + s(tpi) + id(id))
library(dplyr)
parse_formula(times~age + sex + s(tpi) + id(id))
parse_formula(times~ -1 + age + sex + s(tpi) + id(id))
